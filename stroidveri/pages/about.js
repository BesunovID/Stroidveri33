import Head from "next/head"
import Image from "next/image"
import { useEffect, useState, useRef } from "react"
import style from "../styles/About.module.scss"
import {CSSTransition} from 'react-transition-group'

export default function About( {posts} ) {
    return(
        <>
            <Head>
                <title>О компании</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className={style.advantages}>
                {posts.lenght !== 0 ? (
                    posts.map((post) => ( 
                        <LazyPost key={post.id} data={post}>
                        </LazyPost>
                    ))
                ): (
                    <div> Ошибка, попробуйте позже</div>
                )}
            </div>
        </>
    )
}


const LazyPost = ({ data }) => {
    const [isIntersecting, setIntersecting] = useState(false);

    const boxRef = useRef(null);
    const options = {
        rootMargin: '0px',
        threshold: 0.6,
    }

    useEffect(() => {
        const post = boxRef.current;

        const observer = new IntersectionObserver(([entry]) => {
            setIntersecting(entry.isIntersecting);
        }, options);
        observer.observe(post);

        return () => observer.unobserve(post);
    }, [])

    return(
        <div ref={boxRef} className={style.postBox}>
            {isIntersecting ? <Post data={data} start={isIntersecting} /> : <Placeholder />}
        </div>
    )
}

const Post = ({ data, start }) => {
    const postRef = useRef();

    const postAnimationDots = {
        enter: style.postEnter,
        enterActive: style.postEnterActive,
        exit: style.postExit,
        exitActive: style.postExitActive
    };

    return(
        <CSSTransition 
            in={start}
            nodeRef={postRef}
            classNames={postAnimationDots}
            timeout={800}
            mountOnEnter
        > 
            <div ref={postRef} key={data.id} className={(data.id % 2) == 0 ?
                style.post : `${style.post} ${style.left}`}>
                {data.id != '1' ? (<div className={style.image}>
                    <Image
                        src={data.image}
                        alt={data.head}
                        layout='fill'
                    />
                </div>) : null}
                <div className={style.data}>
                    <div className={style.name}>
                        <p>{data.head}</p>
                    </div>
                    <div className={style.description}>
                        <p>{data.desc}</p>
                    </div>
                </div>
            </div>
        </CSSTransition>  
    )
}

const Placeholder = () => {
    return( 
        <div className={style.placeHolder}>

        </div>
    )
};


export async function getStaticProps() {
    const res = await fetch('http://localhost:3000//api/aboutPosts');
    const posts = await res.json();

    if(!posts) {
        return{
            notFound: true,
        };
    }

    return{
        props: {
            posts,
        },
    };
}